version: 2.1

jobs:
  test-example:
    parameters:
      example-app-name:
        type: string
      example-app-path:
        type: string
      test-suite-name:
        type: string
      test-suite-path:
        type: string
      bb-version:
        type: string
    machine:
      image: ubuntu-2004:current
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: Checkout Test Suite from Specific Version
          command: |
            # Clone repository into a temporary directory and switch to the specified tag
            git clone . temp_repo
            cd temp_repo
            git checkout << parameters.bb-version >>

            if [ ! -d "<< parameters.test-suite-path >>" ]; then
              mkdir -p << parameters.test-suite-path >>
            fi

            cp -r test/* << parameters.test-suite-path >>
            cd .. && rm -rf temp_repo

      - run:
          name: Execute tests
          command: |
            echo "# Execute application test_entrypoint.sh in background."
            # Execute application test_entrypoint.sh in background.
            chmod u+x << parameters.example-app-path >>/test_entrypoint.sh
            cd << parameters.example-app-path >> && ./test_entrypoint.sh --version << parameters.bb-version >>

            # Check for testCustomParameters.json
            if [ -f << parameters.example-app-path >>/testCustomParameters.json ]; then
              cp << parameters.example-app-path >>/testCustomParameters.json << parameters.test-suite-path >>
              echo "File testCustomParameters.json has been copied to << parameters.test-suite-path >>."
            else
              echo "File testCustomParameters.json does not exist in << parameters.example-app-path >>."
            fi

            # Execute gherkin tests for given application using test_entrypoint.sh
            chmod u+x << parameters.test-suite-path >>/test_entrypoint.sh
            cd << parameters.test-suite-path >> && ./test_entrypoint.sh

            # Execute script responsible for updating placeholders in the generated report
            if [ -f << parameters.test-suite-path >>/gherkin_param_manager.sh ]; then
              chmod u+x << parameters.test-suite-path >>/gherkin_param_manager.sh
              sudo chmod uo+w << parameters.test-suite-path >>/result
              cd << parameters.test-suite-path >> && ./gherkin_param_manager.sh result/example_result.message
            else
              echo "The script gherkin_param_manager.sh is not present in << parameters.test-suite-path >>."
            fi

      - store_test_results:
          path: << parameters.test-suite-path >>/result
      - checkout
      - run:
          name: Export test results
          command: |
            export TEST_RESULT_REPORT_PATH=<< parameters.test-suite-path >>/result/example_result.message
            export TEST_PRODUCT_META_PATH=<< parameters.example-app-path >>/META.yml
            # API POST call is executed using exported result file and additional execution information as an input
            if ! [ -f "$TEST_RESULT_REPORT_PATH" ]; then
                echo "Report file has to be available under ${TEST_RESULT_REPORT_PATH} directory"
                exit 1
            fi

            if [[ -z "${TEST_RESULTS_STORAGE_API_KEY}" ]]; then
              echo "No Test Result Storage API Key detected."
              echo "Please set the TEST_RESULTS_STORAGE_API_KEY environment variable."
              echo "Aborting test result export."
              exit 1
            fi

            if [[ -z "${TEST_RESULT_STORAGE_URL}" ]]; then
              echo "No Test Result Storage URL detected."
              echo "Please set the TEST_RESULT_STORAGE_URL environment variable."
              echo "Aborting test result export."
              exit 1
            fi

            if [ -f "$TEST_PRODUCT_META_PATH" ]; then
              # Meta file is not mandatory but curl will return 26 code if it's missing.
              curl -v -F buildingBlock=${CIRCLE_PROJECT_REPONAME} \
                -F report=@${TEST_RESULT_REPORT_PATH}             \
                -F version=<< parameters.bb-version >>            \
                -F META=@${TEST_PRODUCT_META_PATH}                \
                -F testSuite=<< parameters.test-suite-name >>     \
                -F testApp=<< parameters.example-app-name >>      \
                -F sourceBranch=${CIRCLE_BRANCH}                  \
                -H "x-api-key: ${TEST_RESULTS_STORAGE_API_KEY}"   \
                "${TEST_RESULT_STORAGE_URL}"
            else
              curl -v -F buildingBlock=${CIRCLE_PROJECT_REPONAME} \
                -F report=@${TEST_RESULT_REPORT_PATH}             \
                -F version=<< parameters.bb-version >>            \
                -F testSuite=<< parameters.test-suite-name >>     \
                -F testApp=<< parameters.example-app-name >>      \
                -F sourceBranch=${CIRCLE_BRANCH}                  \
                -H "x-api-key: ${TEST_RESULTS_STORAGE_API_KEY}"   \
                "${TEST_RESULT_STORAGE_URL}"
            fi

            exit $?

workflows:
  test_everything:
    jobs:
      # This part is replaced programatically by test executions for all example applications
      - test-example:
          example-app-name: example-application-name
          example-app-path: path/to/example_application_directory_with_test_entrypoint
          test-suite-name: example-application-name
          test-suite-path: path/to/example_application_directory_with_test_entrypoint
